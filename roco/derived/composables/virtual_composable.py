from roco.api.composable import Composable

"""Virtual Composable class

This module contains the Virtual Composable class, which is derived from the
Composable class. It is meant to be derived by any classes that produce nontangible
outputs. (code, etc.)
"""
class VirtualComposable(Composable):
    """Virtual Composable is an interface for objects which produce nontangible outputs.

    Any class meant to produce nontangible output usable for the final robot designs should
    derive from this class. In any derived class, all member functions may be
    redefined."""

    def __init__(self):
        """Initializes a Virtual Composable without any container.

        Args:
            None

        """
        pass

    def setContainer(self, container):
        """Sets a container for the Virtual Composable object. All Virtual Composables
        must have a container. The output generated by this composable is dependent
        upon which container it has.

        Args:
            container (ContainerComposable): The container being set as the container
            of this Virtual Composable.
        """
        pass

    def getContainer(self):
        """Gets the container of this Virtual Composable object.

        Args:
            None

        Returns:
            Container Composable Object.
        """
        pass

    def makeOutput(self, filedir, **kwargs):
        """Creates output for the composable.

        Args:
            file_dir (str): the directory to place to output
            kwargs (dict): arguments for the output generation

        Raises:
            Exception("Error: VirtualComposable has no Container!") if the Virtual
            Composable has not container.
        """
        pass

if __name__ == "__main__":
    pass